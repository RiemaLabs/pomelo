PUSH_BIGINT_0 254 29 limbs0
PUSH_BIGINT_1 254 29 limbs1
PUSH_BIGINT_2 254 29 limbs2
PUSH_BIGINT_3 254 29 limbs3
PUSH_BIGINT_4 254 29 limbs4
PUSH_BIGINT_5 254 29 limbs5
PUSH_BIGINT_6 254 29 limbs6
PUSH_BIGINT_7 254 29 limbs7
PUSH_BIGINT_8 254 29 limbs8
PUSH_BIGINT_9 254 29 limbs9
PUSH_BIGINT_10 254 29 limbs10
PUSH_BIGINT_11 254 29 limbs11
PUSH_BIGINT_12 254 29 limbs12
PUSH_BIGINT_13 254 29 limbs13
PUSH_BIGINT_14 254 29 limbs14
PUSH_BIGINT_15 254 29 limbs15
PUSH_BIGINT_16 254 29 limbs16
PUSH_BIGINT_17 254 29 limbs17
PUSH_BIGINT_18 254 29 limbs18
PUSH_BIGINT_19 254 29 limbs19
PUSH_BIGINT_20 254 29 limbs20
PUSH_BIGINT_21 254 29 limbs21
PUSH_BIGINT_22 254 29 limbs22
PUSH_BIGINT_23 254 29 limbs23
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 d700 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs12[0]) }
ASSERT_1 { (stack[2] == limbs0[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs0[0] + (if (limbs0[0] < limbs12[0]) then 536870912 else 0)) - limbs12[0])) }
ASSUME_3 { (stack[1] == (if (limbs0[0] < limbs12[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs0[0] + (if (limbs0[0] < limbs12[0]) then 536870912 else 0)) - limbs12[0]) + 410844487) >= 536870912) then ((((limbs0[0] + (if (limbs0[0] < limbs12[0]) then 536870912 else 0)) - limbs12[0]) + 410844487) - 536870912) else (((limbs0[0] + (if (limbs0[0] < limbs12[0]) then 536870912 else 0)) - limbs12[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs0[0] + (if (limbs0[0] < limbs12[0]) then 536870912 else 0)) - limbs12[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs0[0] < limbs12[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs0[1] + (if (limbs0[1] < (limbs12[1] + i3)) then 536870912 else 0)) - (limbs12[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs0[1] + (if (limbs0[1] < (limbs12[1] + i3)) then 536870912 else 0)) - (limbs12[1] + i3)) + (i2 + 17064118)) - (if ((((limbs0[1] + (if (limbs0[1] < (limbs12[1] + i3)) then 536870912 else 0)) - (limbs12[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs0[1] + (if (limbs0[1] < (limbs12[1] + i3)) then 536870912 else 0)) - (limbs12[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs0[1] < (limbs12[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs0[2] + (if (limbs0[2] < (limbs12[2] + i5)) then 536870912 else 0)) - (limbs12[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs0[2] + (if (limbs0[2] < (limbs12[2] + i5)) then 536870912 else 0)) - (limbs12[2] + i5)) + (i4 + 477274959)) - (if ((((limbs0[2] + (if (limbs0[2] < (limbs12[2] + i5)) then 536870912 else 0)) - (limbs12[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs0[2] + (if (limbs0[2] < (limbs12[2] + i5)) then 536870912 else 0)) - (limbs12[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs0[2] < (limbs12[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs0[3] + (if (limbs0[3] < (limbs12[3] + i7)) then 536870912 else 0)) - (limbs12[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs0[3] + (if (limbs0[3] < (limbs12[3] + i7)) then 536870912 else 0)) - (limbs12[3] + i7)) + (i6 + 47522512)) - (if ((((limbs0[3] + (if (limbs0[3] < (limbs12[3] + i7)) then 536870912 else 0)) - (limbs12[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs0[3] + (if (limbs0[3] < (limbs12[3] + i7)) then 536870912 else 0)) - (limbs12[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs0[3] < (limbs12[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs0[4] + (if (limbs0[4] < (limbs12[4] + i9)) then 536870912 else 0)) - (limbs12[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs0[4] + (if (limbs0[4] < (limbs12[4] + i9)) then 536870912 else 0)) - (limbs12[4] + i9)) + (i8 + 361093496)) - (if ((((limbs0[4] + (if (limbs0[4] < (limbs12[4] + i9)) then 536870912 else 0)) - (limbs12[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs0[4] + (if (limbs0[4] < (limbs12[4] + i9)) then 536870912 else 0)) - (limbs12[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs0[4] < (limbs12[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs0[5] + (if (limbs0[5] < (limbs12[5] + i11)) then 536870912 else 0)) - (limbs12[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs0[5] + (if (limbs0[5] < (limbs12[5] + i11)) then 536870912 else 0)) - (limbs12[5] + i11)) + (i10 + 47923392)) - (if ((((limbs0[5] + (if (limbs0[5] < (limbs12[5] + i11)) then 536870912 else 0)) - (limbs12[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs0[5] + (if (limbs0[5] < (limbs12[5] + i11)) then 536870912 else 0)) - (limbs12[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs0[5] < (limbs12[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs0[6] + (if (limbs0[6] < (limbs12[6] + i13)) then 536870912 else 0)) - (limbs12[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs0[6] + (if (limbs0[6] < (limbs12[6] + i13)) then 536870912 else 0)) - (limbs12[6] + i13)) + (i12 + 10936641)) - (if ((((limbs0[6] + (if (limbs0[6] < (limbs12[6] + i13)) then 536870912 else 0)) - (limbs12[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs0[6] + (if (limbs0[6] < (limbs12[6] + i13)) then 536870912 else 0)) - (limbs12[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs0[6] < (limbs12[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs0[7] + (if (limbs0[7] < (limbs12[7] + i15)) then 536870912 else 0)) - (limbs12[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs0[7] + (if (limbs0[7] < (limbs12[7] + i15)) then 536870912 else 0)) - (limbs12[7] + i15)) + (i14 + 240920116)) - (if ((((limbs0[7] + (if (limbs0[7] < (limbs12[7] + i15)) then 536870912 else 0)) - (limbs12[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs0[7] + (if (limbs0[7] < (limbs12[7] + i15)) then 536870912 else 0)) - (limbs12[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs0[7] < (limbs12[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs0[8] + (if (limbs0[8] < (limbs12[8] + i17)) then 536870912 else 0)) - (limbs12[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs0[8] + (if (limbs0[8] < (limbs12[8] + i17)) then 536870912 else 0)) - (limbs12[8] + i17)) + (i16 + 3171406)) - (if ((((limbs0[8] + (if (limbs0[8] < (limbs12[8] + i17)) then 536870912 else 0)) - (limbs12[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 ce00 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs13[0]) }
ASSERT_1 { (stack[2] == limbs1[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs1[0] + (if (limbs1[0] < limbs13[0]) then 536870912 else 0)) - limbs13[0])) }
ASSUME_3 { (stack[1] == (if (limbs1[0] < limbs13[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs1[0] + (if (limbs1[0] < limbs13[0]) then 536870912 else 0)) - limbs13[0]) + 410844487) >= 536870912) then ((((limbs1[0] + (if (limbs1[0] < limbs13[0]) then 536870912 else 0)) - limbs13[0]) + 410844487) - 536870912) else (((limbs1[0] + (if (limbs1[0] < limbs13[0]) then 536870912 else 0)) - limbs13[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs1[0] + (if (limbs1[0] < limbs13[0]) then 536870912 else 0)) - limbs13[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs1[0] < limbs13[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs1[1] + (if (limbs1[1] < (limbs13[1] + i3)) then 536870912 else 0)) - (limbs13[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs1[1] + (if (limbs1[1] < (limbs13[1] + i3)) then 536870912 else 0)) - (limbs13[1] + i3)) + (i2 + 17064118)) - (if ((((limbs1[1] + (if (limbs1[1] < (limbs13[1] + i3)) then 536870912 else 0)) - (limbs13[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs1[1] + (if (limbs1[1] < (limbs13[1] + i3)) then 536870912 else 0)) - (limbs13[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs1[1] < (limbs13[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs1[2] + (if (limbs1[2] < (limbs13[2] + i5)) then 536870912 else 0)) - (limbs13[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs1[2] + (if (limbs1[2] < (limbs13[2] + i5)) then 536870912 else 0)) - (limbs13[2] + i5)) + (i4 + 477274959)) - (if ((((limbs1[2] + (if (limbs1[2] < (limbs13[2] + i5)) then 536870912 else 0)) - (limbs13[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs1[2] + (if (limbs1[2] < (limbs13[2] + i5)) then 536870912 else 0)) - (limbs13[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs1[2] < (limbs13[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs1[3] + (if (limbs1[3] < (limbs13[3] + i7)) then 536870912 else 0)) - (limbs13[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs1[3] + (if (limbs1[3] < (limbs13[3] + i7)) then 536870912 else 0)) - (limbs13[3] + i7)) + (i6 + 47522512)) - (if ((((limbs1[3] + (if (limbs1[3] < (limbs13[3] + i7)) then 536870912 else 0)) - (limbs13[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs1[3] + (if (limbs1[3] < (limbs13[3] + i7)) then 536870912 else 0)) - (limbs13[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs1[3] < (limbs13[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs1[4] + (if (limbs1[4] < (limbs13[4] + i9)) then 536870912 else 0)) - (limbs13[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs1[4] + (if (limbs1[4] < (limbs13[4] + i9)) then 536870912 else 0)) - (limbs13[4] + i9)) + (i8 + 361093496)) - (if ((((limbs1[4] + (if (limbs1[4] < (limbs13[4] + i9)) then 536870912 else 0)) - (limbs13[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs1[4] + (if (limbs1[4] < (limbs13[4] + i9)) then 536870912 else 0)) - (limbs13[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs1[4] < (limbs13[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs1[5] + (if (limbs1[5] < (limbs13[5] + i11)) then 536870912 else 0)) - (limbs13[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs1[5] + (if (limbs1[5] < (limbs13[5] + i11)) then 536870912 else 0)) - (limbs13[5] + i11)) + (i10 + 47923392)) - (if ((((limbs1[5] + (if (limbs1[5] < (limbs13[5] + i11)) then 536870912 else 0)) - (limbs13[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs1[5] + (if (limbs1[5] < (limbs13[5] + i11)) then 536870912 else 0)) - (limbs13[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs1[5] < (limbs13[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs1[6] + (if (limbs1[6] < (limbs13[6] + i13)) then 536870912 else 0)) - (limbs13[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs1[6] + (if (limbs1[6] < (limbs13[6] + i13)) then 536870912 else 0)) - (limbs13[6] + i13)) + (i12 + 10936641)) - (if ((((limbs1[6] + (if (limbs1[6] < (limbs13[6] + i13)) then 536870912 else 0)) - (limbs13[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs1[6] + (if (limbs1[6] < (limbs13[6] + i13)) then 536870912 else 0)) - (limbs13[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs1[6] < (limbs13[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs1[7] + (if (limbs1[7] < (limbs13[7] + i15)) then 536870912 else 0)) - (limbs13[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs1[7] + (if (limbs1[7] < (limbs13[7] + i15)) then 536870912 else 0)) - (limbs13[7] + i15)) + (i14 + 240920116)) - (if ((((limbs1[7] + (if (limbs1[7] < (limbs13[7] + i15)) then 536870912 else 0)) - (limbs13[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs1[7] + (if (limbs1[7] < (limbs13[7] + i15)) then 536870912 else 0)) - (limbs13[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs1[7] < (limbs13[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs1[8] + (if (limbs1[8] < (limbs13[8] + i17)) then 536870912 else 0)) - (limbs13[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs1[8] + (if (limbs1[8] < (limbs13[8] + i17)) then 536870912 else 0)) - (limbs13[8] + i17)) + (i16 + 3171406)) - (if ((((limbs1[8] + (if (limbs1[8] < (limbs13[8] + i17)) then 536870912 else 0)) - (limbs13[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 c500 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs14[0]) }
ASSERT_1 { (stack[2] == limbs2[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs2[0] + (if (limbs2[0] < limbs14[0]) then 536870912 else 0)) - limbs14[0])) }
ASSUME_3 { (stack[1] == (if (limbs2[0] < limbs14[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs2[0] + (if (limbs2[0] < limbs14[0]) then 536870912 else 0)) - limbs14[0]) + 410844487) >= 536870912) then ((((limbs2[0] + (if (limbs2[0] < limbs14[0]) then 536870912 else 0)) - limbs14[0]) + 410844487) - 536870912) else (((limbs2[0] + (if (limbs2[0] < limbs14[0]) then 536870912 else 0)) - limbs14[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs2[0] + (if (limbs2[0] < limbs14[0]) then 536870912 else 0)) - limbs14[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs2[0] < limbs14[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs2[1] + (if (limbs2[1] < (limbs14[1] + i3)) then 536870912 else 0)) - (limbs14[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs2[1] + (if (limbs2[1] < (limbs14[1] + i3)) then 536870912 else 0)) - (limbs14[1] + i3)) + (i2 + 17064118)) - (if ((((limbs2[1] + (if (limbs2[1] < (limbs14[1] + i3)) then 536870912 else 0)) - (limbs14[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs2[1] + (if (limbs2[1] < (limbs14[1] + i3)) then 536870912 else 0)) - (limbs14[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs2[1] < (limbs14[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs2[2] + (if (limbs2[2] < (limbs14[2] + i5)) then 536870912 else 0)) - (limbs14[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs2[2] + (if (limbs2[2] < (limbs14[2] + i5)) then 536870912 else 0)) - (limbs14[2] + i5)) + (i4 + 477274959)) - (if ((((limbs2[2] + (if (limbs2[2] < (limbs14[2] + i5)) then 536870912 else 0)) - (limbs14[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs2[2] + (if (limbs2[2] < (limbs14[2] + i5)) then 536870912 else 0)) - (limbs14[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs2[2] < (limbs14[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs2[3] + (if (limbs2[3] < (limbs14[3] + i7)) then 536870912 else 0)) - (limbs14[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs2[3] + (if (limbs2[3] < (limbs14[3] + i7)) then 536870912 else 0)) - (limbs14[3] + i7)) + (i6 + 47522512)) - (if ((((limbs2[3] + (if (limbs2[3] < (limbs14[3] + i7)) then 536870912 else 0)) - (limbs14[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs2[3] + (if (limbs2[3] < (limbs14[3] + i7)) then 536870912 else 0)) - (limbs14[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs2[3] < (limbs14[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs2[4] + (if (limbs2[4] < (limbs14[4] + i9)) then 536870912 else 0)) - (limbs14[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs2[4] + (if (limbs2[4] < (limbs14[4] + i9)) then 536870912 else 0)) - (limbs14[4] + i9)) + (i8 + 361093496)) - (if ((((limbs2[4] + (if (limbs2[4] < (limbs14[4] + i9)) then 536870912 else 0)) - (limbs14[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs2[4] + (if (limbs2[4] < (limbs14[4] + i9)) then 536870912 else 0)) - (limbs14[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs2[4] < (limbs14[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs2[5] + (if (limbs2[5] < (limbs14[5] + i11)) then 536870912 else 0)) - (limbs14[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs2[5] + (if (limbs2[5] < (limbs14[5] + i11)) then 536870912 else 0)) - (limbs14[5] + i11)) + (i10 + 47923392)) - (if ((((limbs2[5] + (if (limbs2[5] < (limbs14[5] + i11)) then 536870912 else 0)) - (limbs14[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs2[5] + (if (limbs2[5] < (limbs14[5] + i11)) then 536870912 else 0)) - (limbs14[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs2[5] < (limbs14[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs2[6] + (if (limbs2[6] < (limbs14[6] + i13)) then 536870912 else 0)) - (limbs14[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs2[6] + (if (limbs2[6] < (limbs14[6] + i13)) then 536870912 else 0)) - (limbs14[6] + i13)) + (i12 + 10936641)) - (if ((((limbs2[6] + (if (limbs2[6] < (limbs14[6] + i13)) then 536870912 else 0)) - (limbs14[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs2[6] + (if (limbs2[6] < (limbs14[6] + i13)) then 536870912 else 0)) - (limbs14[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs2[6] < (limbs14[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs2[7] + (if (limbs2[7] < (limbs14[7] + i15)) then 536870912 else 0)) - (limbs14[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs2[7] + (if (limbs2[7] < (limbs14[7] + i15)) then 536870912 else 0)) - (limbs14[7] + i15)) + (i14 + 240920116)) - (if ((((limbs2[7] + (if (limbs2[7] < (limbs14[7] + i15)) then 536870912 else 0)) - (limbs14[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs2[7] + (if (limbs2[7] < (limbs14[7] + i15)) then 536870912 else 0)) - (limbs14[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs2[7] < (limbs14[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs2[8] + (if (limbs2[8] < (limbs14[8] + i17)) then 536870912 else 0)) - (limbs14[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs2[8] + (if (limbs2[8] < (limbs14[8] + i17)) then 536870912 else 0)) - (limbs14[8] + i17)) + (i16 + 3171406)) - (if ((((limbs2[8] + (if (limbs2[8] < (limbs14[8] + i17)) then 536870912 else 0)) - (limbs14[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 bc00 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs15[0]) }
ASSERT_1 { (stack[2] == limbs3[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs3[0] + (if (limbs3[0] < limbs15[0]) then 536870912 else 0)) - limbs15[0])) }
ASSUME_3 { (stack[1] == (if (limbs3[0] < limbs15[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs3[0] + (if (limbs3[0] < limbs15[0]) then 536870912 else 0)) - limbs15[0]) + 410844487) >= 536870912) then ((((limbs3[0] + (if (limbs3[0] < limbs15[0]) then 536870912 else 0)) - limbs15[0]) + 410844487) - 536870912) else (((limbs3[0] + (if (limbs3[0] < limbs15[0]) then 536870912 else 0)) - limbs15[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs3[0] + (if (limbs3[0] < limbs15[0]) then 536870912 else 0)) - limbs15[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs3[0] < limbs15[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs3[1] + (if (limbs3[1] < (limbs15[1] + i3)) then 536870912 else 0)) - (limbs15[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs3[1] + (if (limbs3[1] < (limbs15[1] + i3)) then 536870912 else 0)) - (limbs15[1] + i3)) + (i2 + 17064118)) - (if ((((limbs3[1] + (if (limbs3[1] < (limbs15[1] + i3)) then 536870912 else 0)) - (limbs15[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs3[1] + (if (limbs3[1] < (limbs15[1] + i3)) then 536870912 else 0)) - (limbs15[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs3[1] < (limbs15[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs3[2] + (if (limbs3[2] < (limbs15[2] + i5)) then 536870912 else 0)) - (limbs15[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs3[2] + (if (limbs3[2] < (limbs15[2] + i5)) then 536870912 else 0)) - (limbs15[2] + i5)) + (i4 + 477274959)) - (if ((((limbs3[2] + (if (limbs3[2] < (limbs15[2] + i5)) then 536870912 else 0)) - (limbs15[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs3[2] + (if (limbs3[2] < (limbs15[2] + i5)) then 536870912 else 0)) - (limbs15[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs3[2] < (limbs15[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs3[3] + (if (limbs3[3] < (limbs15[3] + i7)) then 536870912 else 0)) - (limbs15[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs3[3] + (if (limbs3[3] < (limbs15[3] + i7)) then 536870912 else 0)) - (limbs15[3] + i7)) + (i6 + 47522512)) - (if ((((limbs3[3] + (if (limbs3[3] < (limbs15[3] + i7)) then 536870912 else 0)) - (limbs15[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs3[3] + (if (limbs3[3] < (limbs15[3] + i7)) then 536870912 else 0)) - (limbs15[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs3[3] < (limbs15[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs3[4] + (if (limbs3[4] < (limbs15[4] + i9)) then 536870912 else 0)) - (limbs15[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs3[4] + (if (limbs3[4] < (limbs15[4] + i9)) then 536870912 else 0)) - (limbs15[4] + i9)) + (i8 + 361093496)) - (if ((((limbs3[4] + (if (limbs3[4] < (limbs15[4] + i9)) then 536870912 else 0)) - (limbs15[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs3[4] + (if (limbs3[4] < (limbs15[4] + i9)) then 536870912 else 0)) - (limbs15[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs3[4] < (limbs15[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs3[5] + (if (limbs3[5] < (limbs15[5] + i11)) then 536870912 else 0)) - (limbs15[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs3[5] + (if (limbs3[5] < (limbs15[5] + i11)) then 536870912 else 0)) - (limbs15[5] + i11)) + (i10 + 47923392)) - (if ((((limbs3[5] + (if (limbs3[5] < (limbs15[5] + i11)) then 536870912 else 0)) - (limbs15[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs3[5] + (if (limbs3[5] < (limbs15[5] + i11)) then 536870912 else 0)) - (limbs15[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs3[5] < (limbs15[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs3[6] + (if (limbs3[6] < (limbs15[6] + i13)) then 536870912 else 0)) - (limbs15[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs3[6] + (if (limbs3[6] < (limbs15[6] + i13)) then 536870912 else 0)) - (limbs15[6] + i13)) + (i12 + 10936641)) - (if ((((limbs3[6] + (if (limbs3[6] < (limbs15[6] + i13)) then 536870912 else 0)) - (limbs15[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs3[6] + (if (limbs3[6] < (limbs15[6] + i13)) then 536870912 else 0)) - (limbs15[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs3[6] < (limbs15[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs3[7] + (if (limbs3[7] < (limbs15[7] + i15)) then 536870912 else 0)) - (limbs15[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs3[7] + (if (limbs3[7] < (limbs15[7] + i15)) then 536870912 else 0)) - (limbs15[7] + i15)) + (i14 + 240920116)) - (if ((((limbs3[7] + (if (limbs3[7] < (limbs15[7] + i15)) then 536870912 else 0)) - (limbs15[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs3[7] + (if (limbs3[7] < (limbs15[7] + i15)) then 536870912 else 0)) - (limbs15[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs3[7] < (limbs15[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs3[8] + (if (limbs3[8] < (limbs15[8] + i17)) then 536870912 else 0)) - (limbs15[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs3[8] + (if (limbs3[8] < (limbs15[8] + i17)) then 536870912 else 0)) - (limbs15[8] + i17)) + (i16 + 3171406)) - (if ((((limbs3[8] + (if (limbs3[8] < (limbs15[8] + i17)) then 536870912 else 0)) - (limbs15[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 b300 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs16[0]) }
ASSERT_1 { (stack[2] == limbs4[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs4[0] + (if (limbs4[0] < limbs16[0]) then 536870912 else 0)) - limbs16[0])) }
ASSUME_3 { (stack[1] == (if (limbs4[0] < limbs16[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs4[0] + (if (limbs4[0] < limbs16[0]) then 536870912 else 0)) - limbs16[0]) + 410844487) >= 536870912) then ((((limbs4[0] + (if (limbs4[0] < limbs16[0]) then 536870912 else 0)) - limbs16[0]) + 410844487) - 536870912) else (((limbs4[0] + (if (limbs4[0] < limbs16[0]) then 536870912 else 0)) - limbs16[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs4[0] + (if (limbs4[0] < limbs16[0]) then 536870912 else 0)) - limbs16[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs4[0] < limbs16[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs4[1] + (if (limbs4[1] < (limbs16[1] + i3)) then 536870912 else 0)) - (limbs16[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs4[1] + (if (limbs4[1] < (limbs16[1] + i3)) then 536870912 else 0)) - (limbs16[1] + i3)) + (i2 + 17064118)) - (if ((((limbs4[1] + (if (limbs4[1] < (limbs16[1] + i3)) then 536870912 else 0)) - (limbs16[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs4[1] + (if (limbs4[1] < (limbs16[1] + i3)) then 536870912 else 0)) - (limbs16[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs4[1] < (limbs16[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs4[2] + (if (limbs4[2] < (limbs16[2] + i5)) then 536870912 else 0)) - (limbs16[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs4[2] + (if (limbs4[2] < (limbs16[2] + i5)) then 536870912 else 0)) - (limbs16[2] + i5)) + (i4 + 477274959)) - (if ((((limbs4[2] + (if (limbs4[2] < (limbs16[2] + i5)) then 536870912 else 0)) - (limbs16[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs4[2] + (if (limbs4[2] < (limbs16[2] + i5)) then 536870912 else 0)) - (limbs16[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs4[2] < (limbs16[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs4[3] + (if (limbs4[3] < (limbs16[3] + i7)) then 536870912 else 0)) - (limbs16[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs4[3] + (if (limbs4[3] < (limbs16[3] + i7)) then 536870912 else 0)) - (limbs16[3] + i7)) + (i6 + 47522512)) - (if ((((limbs4[3] + (if (limbs4[3] < (limbs16[3] + i7)) then 536870912 else 0)) - (limbs16[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs4[3] + (if (limbs4[3] < (limbs16[3] + i7)) then 536870912 else 0)) - (limbs16[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs4[3] < (limbs16[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs4[4] + (if (limbs4[4] < (limbs16[4] + i9)) then 536870912 else 0)) - (limbs16[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs4[4] + (if (limbs4[4] < (limbs16[4] + i9)) then 536870912 else 0)) - (limbs16[4] + i9)) + (i8 + 361093496)) - (if ((((limbs4[4] + (if (limbs4[4] < (limbs16[4] + i9)) then 536870912 else 0)) - (limbs16[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs4[4] + (if (limbs4[4] < (limbs16[4] + i9)) then 536870912 else 0)) - (limbs16[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs4[4] < (limbs16[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs4[5] + (if (limbs4[5] < (limbs16[5] + i11)) then 536870912 else 0)) - (limbs16[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs4[5] + (if (limbs4[5] < (limbs16[5] + i11)) then 536870912 else 0)) - (limbs16[5] + i11)) + (i10 + 47923392)) - (if ((((limbs4[5] + (if (limbs4[5] < (limbs16[5] + i11)) then 536870912 else 0)) - (limbs16[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs4[5] + (if (limbs4[5] < (limbs16[5] + i11)) then 536870912 else 0)) - (limbs16[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs4[5] < (limbs16[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs4[6] + (if (limbs4[6] < (limbs16[6] + i13)) then 536870912 else 0)) - (limbs16[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs4[6] + (if (limbs4[6] < (limbs16[6] + i13)) then 536870912 else 0)) - (limbs16[6] + i13)) + (i12 + 10936641)) - (if ((((limbs4[6] + (if (limbs4[6] < (limbs16[6] + i13)) then 536870912 else 0)) - (limbs16[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs4[6] + (if (limbs4[6] < (limbs16[6] + i13)) then 536870912 else 0)) - (limbs16[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs4[6] < (limbs16[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs4[7] + (if (limbs4[7] < (limbs16[7] + i15)) then 536870912 else 0)) - (limbs16[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs4[7] + (if (limbs4[7] < (limbs16[7] + i15)) then 536870912 else 0)) - (limbs16[7] + i15)) + (i14 + 240920116)) - (if ((((limbs4[7] + (if (limbs4[7] < (limbs16[7] + i15)) then 536870912 else 0)) - (limbs16[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs4[7] + (if (limbs4[7] < (limbs16[7] + i15)) then 536870912 else 0)) - (limbs16[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs4[7] < (limbs16[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs4[8] + (if (limbs4[8] < (limbs16[8] + i17)) then 536870912 else 0)) - (limbs16[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs4[8] + (if (limbs4[8] < (limbs16[8] + i17)) then 536870912 else 0)) - (limbs16[8] + i17)) + (i16 + 3171406)) - (if ((((limbs4[8] + (if (limbs4[8] < (limbs16[8] + i17)) then 536870912 else 0)) - (limbs16[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 aa00 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs17[0]) }
ASSERT_1 { (stack[2] == limbs5[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs5[0] + (if (limbs5[0] < limbs17[0]) then 536870912 else 0)) - limbs17[0])) }
ASSUME_3 { (stack[1] == (if (limbs5[0] < limbs17[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs5[0] + (if (limbs5[0] < limbs17[0]) then 536870912 else 0)) - limbs17[0]) + 410844487) >= 536870912) then ((((limbs5[0] + (if (limbs5[0] < limbs17[0]) then 536870912 else 0)) - limbs17[0]) + 410844487) - 536870912) else (((limbs5[0] + (if (limbs5[0] < limbs17[0]) then 536870912 else 0)) - limbs17[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs5[0] + (if (limbs5[0] < limbs17[0]) then 536870912 else 0)) - limbs17[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs5[0] < limbs17[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs5[1] + (if (limbs5[1] < (limbs17[1] + i3)) then 536870912 else 0)) - (limbs17[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs5[1] + (if (limbs5[1] < (limbs17[1] + i3)) then 536870912 else 0)) - (limbs17[1] + i3)) + (i2 + 17064118)) - (if ((((limbs5[1] + (if (limbs5[1] < (limbs17[1] + i3)) then 536870912 else 0)) - (limbs17[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs5[1] + (if (limbs5[1] < (limbs17[1] + i3)) then 536870912 else 0)) - (limbs17[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs5[1] < (limbs17[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs5[2] + (if (limbs5[2] < (limbs17[2] + i5)) then 536870912 else 0)) - (limbs17[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs5[2] + (if (limbs5[2] < (limbs17[2] + i5)) then 536870912 else 0)) - (limbs17[2] + i5)) + (i4 + 477274959)) - (if ((((limbs5[2] + (if (limbs5[2] < (limbs17[2] + i5)) then 536870912 else 0)) - (limbs17[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs5[2] + (if (limbs5[2] < (limbs17[2] + i5)) then 536870912 else 0)) - (limbs17[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs5[2] < (limbs17[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs5[3] + (if (limbs5[3] < (limbs17[3] + i7)) then 536870912 else 0)) - (limbs17[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs5[3] + (if (limbs5[3] < (limbs17[3] + i7)) then 536870912 else 0)) - (limbs17[3] + i7)) + (i6 + 47522512)) - (if ((((limbs5[3] + (if (limbs5[3] < (limbs17[3] + i7)) then 536870912 else 0)) - (limbs17[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs5[3] + (if (limbs5[3] < (limbs17[3] + i7)) then 536870912 else 0)) - (limbs17[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs5[3] < (limbs17[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs5[4] + (if (limbs5[4] < (limbs17[4] + i9)) then 536870912 else 0)) - (limbs17[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs5[4] + (if (limbs5[4] < (limbs17[4] + i9)) then 536870912 else 0)) - (limbs17[4] + i9)) + (i8 + 361093496)) - (if ((((limbs5[4] + (if (limbs5[4] < (limbs17[4] + i9)) then 536870912 else 0)) - (limbs17[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs5[4] + (if (limbs5[4] < (limbs17[4] + i9)) then 536870912 else 0)) - (limbs17[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs5[4] < (limbs17[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs5[5] + (if (limbs5[5] < (limbs17[5] + i11)) then 536870912 else 0)) - (limbs17[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs5[5] + (if (limbs5[5] < (limbs17[5] + i11)) then 536870912 else 0)) - (limbs17[5] + i11)) + (i10 + 47923392)) - (if ((((limbs5[5] + (if (limbs5[5] < (limbs17[5] + i11)) then 536870912 else 0)) - (limbs17[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs5[5] + (if (limbs5[5] < (limbs17[5] + i11)) then 536870912 else 0)) - (limbs17[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs5[5] < (limbs17[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs5[6] + (if (limbs5[6] < (limbs17[6] + i13)) then 536870912 else 0)) - (limbs17[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs5[6] + (if (limbs5[6] < (limbs17[6] + i13)) then 536870912 else 0)) - (limbs17[6] + i13)) + (i12 + 10936641)) - (if ((((limbs5[6] + (if (limbs5[6] < (limbs17[6] + i13)) then 536870912 else 0)) - (limbs17[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs5[6] + (if (limbs5[6] < (limbs17[6] + i13)) then 536870912 else 0)) - (limbs17[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs5[6] < (limbs17[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs5[7] + (if (limbs5[7] < (limbs17[7] + i15)) then 536870912 else 0)) - (limbs17[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs5[7] + (if (limbs5[7] < (limbs17[7] + i15)) then 536870912 else 0)) - (limbs17[7] + i15)) + (i14 + 240920116)) - (if ((((limbs5[7] + (if (limbs5[7] < (limbs17[7] + i15)) then 536870912 else 0)) - (limbs17[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs5[7] + (if (limbs5[7] < (limbs17[7] + i15)) then 536870912 else 0)) - (limbs17[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs5[7] < (limbs17[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs5[8] + (if (limbs5[8] < (limbs17[8] + i17)) then 536870912 else 0)) - (limbs17[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs5[8] + (if (limbs5[8] < (limbs17[8] + i17)) then 536870912 else 0)) - (limbs17[8] + i17)) + (i16 + 3171406)) - (if ((((limbs5[8] + (if (limbs5[8] < (limbs17[8] + i17)) then 536870912 else 0)) - (limbs17[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 a100 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs18[0]) }
ASSERT_1 { (stack[2] == limbs6[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs6[0] + (if (limbs6[0] < limbs18[0]) then 536870912 else 0)) - limbs18[0])) }
ASSUME_3 { (stack[1] == (if (limbs6[0] < limbs18[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs6[0] + (if (limbs6[0] < limbs18[0]) then 536870912 else 0)) - limbs18[0]) + 410844487) >= 536870912) then ((((limbs6[0] + (if (limbs6[0] < limbs18[0]) then 536870912 else 0)) - limbs18[0]) + 410844487) - 536870912) else (((limbs6[0] + (if (limbs6[0] < limbs18[0]) then 536870912 else 0)) - limbs18[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs6[0] + (if (limbs6[0] < limbs18[0]) then 536870912 else 0)) - limbs18[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs6[0] < limbs18[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs6[1] + (if (limbs6[1] < (limbs18[1] + i3)) then 536870912 else 0)) - (limbs18[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs6[1] + (if (limbs6[1] < (limbs18[1] + i3)) then 536870912 else 0)) - (limbs18[1] + i3)) + (i2 + 17064118)) - (if ((((limbs6[1] + (if (limbs6[1] < (limbs18[1] + i3)) then 536870912 else 0)) - (limbs18[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs6[1] + (if (limbs6[1] < (limbs18[1] + i3)) then 536870912 else 0)) - (limbs18[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs6[1] < (limbs18[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs6[2] + (if (limbs6[2] < (limbs18[2] + i5)) then 536870912 else 0)) - (limbs18[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs6[2] + (if (limbs6[2] < (limbs18[2] + i5)) then 536870912 else 0)) - (limbs18[2] + i5)) + (i4 + 477274959)) - (if ((((limbs6[2] + (if (limbs6[2] < (limbs18[2] + i5)) then 536870912 else 0)) - (limbs18[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs6[2] + (if (limbs6[2] < (limbs18[2] + i5)) then 536870912 else 0)) - (limbs18[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs6[2] < (limbs18[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs6[3] + (if (limbs6[3] < (limbs18[3] + i7)) then 536870912 else 0)) - (limbs18[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs6[3] + (if (limbs6[3] < (limbs18[3] + i7)) then 536870912 else 0)) - (limbs18[3] + i7)) + (i6 + 47522512)) - (if ((((limbs6[3] + (if (limbs6[3] < (limbs18[3] + i7)) then 536870912 else 0)) - (limbs18[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs6[3] + (if (limbs6[3] < (limbs18[3] + i7)) then 536870912 else 0)) - (limbs18[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs6[3] < (limbs18[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs6[4] + (if (limbs6[4] < (limbs18[4] + i9)) then 536870912 else 0)) - (limbs18[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs6[4] + (if (limbs6[4] < (limbs18[4] + i9)) then 536870912 else 0)) - (limbs18[4] + i9)) + (i8 + 361093496)) - (if ((((limbs6[4] + (if (limbs6[4] < (limbs18[4] + i9)) then 536870912 else 0)) - (limbs18[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs6[4] + (if (limbs6[4] < (limbs18[4] + i9)) then 536870912 else 0)) - (limbs18[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs6[4] < (limbs18[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs6[5] + (if (limbs6[5] < (limbs18[5] + i11)) then 536870912 else 0)) - (limbs18[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs6[5] + (if (limbs6[5] < (limbs18[5] + i11)) then 536870912 else 0)) - (limbs18[5] + i11)) + (i10 + 47923392)) - (if ((((limbs6[5] + (if (limbs6[5] < (limbs18[5] + i11)) then 536870912 else 0)) - (limbs18[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs6[5] + (if (limbs6[5] < (limbs18[5] + i11)) then 536870912 else 0)) - (limbs18[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs6[5] < (limbs18[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs6[6] + (if (limbs6[6] < (limbs18[6] + i13)) then 536870912 else 0)) - (limbs18[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs6[6] + (if (limbs6[6] < (limbs18[6] + i13)) then 536870912 else 0)) - (limbs18[6] + i13)) + (i12 + 10936641)) - (if ((((limbs6[6] + (if (limbs6[6] < (limbs18[6] + i13)) then 536870912 else 0)) - (limbs18[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs6[6] + (if (limbs6[6] < (limbs18[6] + i13)) then 536870912 else 0)) - (limbs18[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs6[6] < (limbs18[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs6[7] + (if (limbs6[7] < (limbs18[7] + i15)) then 536870912 else 0)) - (limbs18[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs6[7] + (if (limbs6[7] < (limbs18[7] + i15)) then 536870912 else 0)) - (limbs18[7] + i15)) + (i14 + 240920116)) - (if ((((limbs6[7] + (if (limbs6[7] < (limbs18[7] + i15)) then 536870912 else 0)) - (limbs18[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs6[7] + (if (limbs6[7] < (limbs18[7] + i15)) then 536870912 else 0)) - (limbs18[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs6[7] < (limbs18[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs6[8] + (if (limbs6[8] < (limbs18[8] + i17)) then 536870912 else 0)) - (limbs18[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs6[8] + (if (limbs6[8] < (limbs18[8] + i17)) then 536870912 else 0)) - (limbs18[8] + i17)) + (i16 + 3171406)) - (if ((((limbs6[8] + (if (limbs6[8] < (limbs18[8] + i17)) then 536870912 else 0)) - (limbs18[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 9800 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs19[0]) }
ASSERT_1 { (stack[2] == limbs7[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs7[0] + (if (limbs7[0] < limbs19[0]) then 536870912 else 0)) - limbs19[0])) }
ASSUME_3 { (stack[1] == (if (limbs7[0] < limbs19[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs7[0] + (if (limbs7[0] < limbs19[0]) then 536870912 else 0)) - limbs19[0]) + 410844487) >= 536870912) then ((((limbs7[0] + (if (limbs7[0] < limbs19[0]) then 536870912 else 0)) - limbs19[0]) + 410844487) - 536870912) else (((limbs7[0] + (if (limbs7[0] < limbs19[0]) then 536870912 else 0)) - limbs19[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs7[0] + (if (limbs7[0] < limbs19[0]) then 536870912 else 0)) - limbs19[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs7[0] < limbs19[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs7[1] + (if (limbs7[1] < (limbs19[1] + i3)) then 536870912 else 0)) - (limbs19[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs7[1] + (if (limbs7[1] < (limbs19[1] + i3)) then 536870912 else 0)) - (limbs19[1] + i3)) + (i2 + 17064118)) - (if ((((limbs7[1] + (if (limbs7[1] < (limbs19[1] + i3)) then 536870912 else 0)) - (limbs19[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs7[1] + (if (limbs7[1] < (limbs19[1] + i3)) then 536870912 else 0)) - (limbs19[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs7[1] < (limbs19[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs7[2] + (if (limbs7[2] < (limbs19[2] + i5)) then 536870912 else 0)) - (limbs19[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs7[2] + (if (limbs7[2] < (limbs19[2] + i5)) then 536870912 else 0)) - (limbs19[2] + i5)) + (i4 + 477274959)) - (if ((((limbs7[2] + (if (limbs7[2] < (limbs19[2] + i5)) then 536870912 else 0)) - (limbs19[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs7[2] + (if (limbs7[2] < (limbs19[2] + i5)) then 536870912 else 0)) - (limbs19[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs7[2] < (limbs19[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs7[3] + (if (limbs7[3] < (limbs19[3] + i7)) then 536870912 else 0)) - (limbs19[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs7[3] + (if (limbs7[3] < (limbs19[3] + i7)) then 536870912 else 0)) - (limbs19[3] + i7)) + (i6 + 47522512)) - (if ((((limbs7[3] + (if (limbs7[3] < (limbs19[3] + i7)) then 536870912 else 0)) - (limbs19[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs7[3] + (if (limbs7[3] < (limbs19[3] + i7)) then 536870912 else 0)) - (limbs19[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs7[3] < (limbs19[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs7[4] + (if (limbs7[4] < (limbs19[4] + i9)) then 536870912 else 0)) - (limbs19[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs7[4] + (if (limbs7[4] < (limbs19[4] + i9)) then 536870912 else 0)) - (limbs19[4] + i9)) + (i8 + 361093496)) - (if ((((limbs7[4] + (if (limbs7[4] < (limbs19[4] + i9)) then 536870912 else 0)) - (limbs19[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs7[4] + (if (limbs7[4] < (limbs19[4] + i9)) then 536870912 else 0)) - (limbs19[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs7[4] < (limbs19[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs7[5] + (if (limbs7[5] < (limbs19[5] + i11)) then 536870912 else 0)) - (limbs19[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs7[5] + (if (limbs7[5] < (limbs19[5] + i11)) then 536870912 else 0)) - (limbs19[5] + i11)) + (i10 + 47923392)) - (if ((((limbs7[5] + (if (limbs7[5] < (limbs19[5] + i11)) then 536870912 else 0)) - (limbs19[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs7[5] + (if (limbs7[5] < (limbs19[5] + i11)) then 536870912 else 0)) - (limbs19[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs7[5] < (limbs19[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs7[6] + (if (limbs7[6] < (limbs19[6] + i13)) then 536870912 else 0)) - (limbs19[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs7[6] + (if (limbs7[6] < (limbs19[6] + i13)) then 536870912 else 0)) - (limbs19[6] + i13)) + (i12 + 10936641)) - (if ((((limbs7[6] + (if (limbs7[6] < (limbs19[6] + i13)) then 536870912 else 0)) - (limbs19[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs7[6] + (if (limbs7[6] < (limbs19[6] + i13)) then 536870912 else 0)) - (limbs19[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs7[6] < (limbs19[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs7[7] + (if (limbs7[7] < (limbs19[7] + i15)) then 536870912 else 0)) - (limbs19[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs7[7] + (if (limbs7[7] < (limbs19[7] + i15)) then 536870912 else 0)) - (limbs19[7] + i15)) + (i14 + 240920116)) - (if ((((limbs7[7] + (if (limbs7[7] < (limbs19[7] + i15)) then 536870912 else 0)) - (limbs19[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs7[7] + (if (limbs7[7] < (limbs19[7] + i15)) then 536870912 else 0)) - (limbs19[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs7[7] < (limbs19[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs7[8] + (if (limbs7[8] < (limbs19[8] + i17)) then 536870912 else 0)) - (limbs19[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs7[8] + (if (limbs7[8] < (limbs19[8] + i17)) then 536870912 else 0)) - (limbs19[8] + i17)) + (i16 + 3171406)) - (if ((((limbs7[8] + (if (limbs7[8] < (limbs19[8] + i17)) then 536870912 else 0)) - (limbs19[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 8f00 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs20[0]) }
ASSERT_1 { (stack[2] == limbs8[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs8[0] + (if (limbs8[0] < limbs20[0]) then 536870912 else 0)) - limbs20[0])) }
ASSUME_3 { (stack[1] == (if (limbs8[0] < limbs20[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs8[0] + (if (limbs8[0] < limbs20[0]) then 536870912 else 0)) - limbs20[0]) + 410844487) >= 536870912) then ((((limbs8[0] + (if (limbs8[0] < limbs20[0]) then 536870912 else 0)) - limbs20[0]) + 410844487) - 536870912) else (((limbs8[0] + (if (limbs8[0] < limbs20[0]) then 536870912 else 0)) - limbs20[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs8[0] + (if (limbs8[0] < limbs20[0]) then 536870912 else 0)) - limbs20[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs8[0] < limbs20[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs8[1] + (if (limbs8[1] < (limbs20[1] + i3)) then 536870912 else 0)) - (limbs20[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs8[1] + (if (limbs8[1] < (limbs20[1] + i3)) then 536870912 else 0)) - (limbs20[1] + i3)) + (i2 + 17064118)) - (if ((((limbs8[1] + (if (limbs8[1] < (limbs20[1] + i3)) then 536870912 else 0)) - (limbs20[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs8[1] + (if (limbs8[1] < (limbs20[1] + i3)) then 536870912 else 0)) - (limbs20[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs8[1] < (limbs20[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs8[2] + (if (limbs8[2] < (limbs20[2] + i5)) then 536870912 else 0)) - (limbs20[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs8[2] + (if (limbs8[2] < (limbs20[2] + i5)) then 536870912 else 0)) - (limbs20[2] + i5)) + (i4 + 477274959)) - (if ((((limbs8[2] + (if (limbs8[2] < (limbs20[2] + i5)) then 536870912 else 0)) - (limbs20[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs8[2] + (if (limbs8[2] < (limbs20[2] + i5)) then 536870912 else 0)) - (limbs20[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs8[2] < (limbs20[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs8[3] + (if (limbs8[3] < (limbs20[3] + i7)) then 536870912 else 0)) - (limbs20[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs8[3] + (if (limbs8[3] < (limbs20[3] + i7)) then 536870912 else 0)) - (limbs20[3] + i7)) + (i6 + 47522512)) - (if ((((limbs8[3] + (if (limbs8[3] < (limbs20[3] + i7)) then 536870912 else 0)) - (limbs20[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs8[3] + (if (limbs8[3] < (limbs20[3] + i7)) then 536870912 else 0)) - (limbs20[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs8[3] < (limbs20[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs8[4] + (if (limbs8[4] < (limbs20[4] + i9)) then 536870912 else 0)) - (limbs20[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs8[4] + (if (limbs8[4] < (limbs20[4] + i9)) then 536870912 else 0)) - (limbs20[4] + i9)) + (i8 + 361093496)) - (if ((((limbs8[4] + (if (limbs8[4] < (limbs20[4] + i9)) then 536870912 else 0)) - (limbs20[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs8[4] + (if (limbs8[4] < (limbs20[4] + i9)) then 536870912 else 0)) - (limbs20[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs8[4] < (limbs20[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs8[5] + (if (limbs8[5] < (limbs20[5] + i11)) then 536870912 else 0)) - (limbs20[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs8[5] + (if (limbs8[5] < (limbs20[5] + i11)) then 536870912 else 0)) - (limbs20[5] + i11)) + (i10 + 47923392)) - (if ((((limbs8[5] + (if (limbs8[5] < (limbs20[5] + i11)) then 536870912 else 0)) - (limbs20[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs8[5] + (if (limbs8[5] < (limbs20[5] + i11)) then 536870912 else 0)) - (limbs20[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs8[5] < (limbs20[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs8[6] + (if (limbs8[6] < (limbs20[6] + i13)) then 536870912 else 0)) - (limbs20[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs8[6] + (if (limbs8[6] < (limbs20[6] + i13)) then 536870912 else 0)) - (limbs20[6] + i13)) + (i12 + 10936641)) - (if ((((limbs8[6] + (if (limbs8[6] < (limbs20[6] + i13)) then 536870912 else 0)) - (limbs20[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs8[6] + (if (limbs8[6] < (limbs20[6] + i13)) then 536870912 else 0)) - (limbs20[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs8[6] < (limbs20[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs8[7] + (if (limbs8[7] < (limbs20[7] + i15)) then 536870912 else 0)) - (limbs20[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs8[7] + (if (limbs8[7] < (limbs20[7] + i15)) then 536870912 else 0)) - (limbs20[7] + i15)) + (i14 + 240920116)) - (if ((((limbs8[7] + (if (limbs8[7] < (limbs20[7] + i15)) then 536870912 else 0)) - (limbs20[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs8[7] + (if (limbs8[7] < (limbs20[7] + i15)) then 536870912 else 0)) - (limbs20[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs8[7] < (limbs20[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs8[8] + (if (limbs8[8] < (limbs20[8] + i17)) then 536870912 else 0)) - (limbs20[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs8[8] + (if (limbs8[8] < (limbs20[8] + i17)) then 536870912 else 0)) - (limbs20[8] + i17)) + (i16 + 3171406)) - (if ((((limbs8[8] + (if (limbs8[8] < (limbs20[8] + i17)) then 536870912 else 0)) - (limbs20[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_2 8600 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs21[0]) }
ASSERT_1 { (stack[2] == limbs9[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs9[0] + (if (limbs9[0] < limbs21[0]) then 536870912 else 0)) - limbs21[0])) }
ASSUME_3 { (stack[1] == (if (limbs9[0] < limbs21[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs9[0] + (if (limbs9[0] < limbs21[0]) then 536870912 else 0)) - limbs21[0]) + 410844487) >= 536870912) then ((((limbs9[0] + (if (limbs9[0] < limbs21[0]) then 536870912 else 0)) - limbs21[0]) + 410844487) - 536870912) else (((limbs9[0] + (if (limbs9[0] < limbs21[0]) then 536870912 else 0)) - limbs21[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs9[0] + (if (limbs9[0] < limbs21[0]) then 536870912 else 0)) - limbs21[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs9[0] < limbs21[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs9[1] + (if (limbs9[1] < (limbs21[1] + i3)) then 536870912 else 0)) - (limbs21[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs9[1] + (if (limbs9[1] < (limbs21[1] + i3)) then 536870912 else 0)) - (limbs21[1] + i3)) + (i2 + 17064118)) - (if ((((limbs9[1] + (if (limbs9[1] < (limbs21[1] + i3)) then 536870912 else 0)) - (limbs21[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs9[1] + (if (limbs9[1] < (limbs21[1] + i3)) then 536870912 else 0)) - (limbs21[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs9[1] < (limbs21[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs9[2] + (if (limbs9[2] < (limbs21[2] + i5)) then 536870912 else 0)) - (limbs21[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs9[2] + (if (limbs9[2] < (limbs21[2] + i5)) then 536870912 else 0)) - (limbs21[2] + i5)) + (i4 + 477274959)) - (if ((((limbs9[2] + (if (limbs9[2] < (limbs21[2] + i5)) then 536870912 else 0)) - (limbs21[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs9[2] + (if (limbs9[2] < (limbs21[2] + i5)) then 536870912 else 0)) - (limbs21[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs9[2] < (limbs21[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs9[3] + (if (limbs9[3] < (limbs21[3] + i7)) then 536870912 else 0)) - (limbs21[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs9[3] + (if (limbs9[3] < (limbs21[3] + i7)) then 536870912 else 0)) - (limbs21[3] + i7)) + (i6 + 47522512)) - (if ((((limbs9[3] + (if (limbs9[3] < (limbs21[3] + i7)) then 536870912 else 0)) - (limbs21[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs9[3] + (if (limbs9[3] < (limbs21[3] + i7)) then 536870912 else 0)) - (limbs21[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs9[3] < (limbs21[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs9[4] + (if (limbs9[4] < (limbs21[4] + i9)) then 536870912 else 0)) - (limbs21[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs9[4] + (if (limbs9[4] < (limbs21[4] + i9)) then 536870912 else 0)) - (limbs21[4] + i9)) + (i8 + 361093496)) - (if ((((limbs9[4] + (if (limbs9[4] < (limbs21[4] + i9)) then 536870912 else 0)) - (limbs21[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs9[4] + (if (limbs9[4] < (limbs21[4] + i9)) then 536870912 else 0)) - (limbs21[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs9[4] < (limbs21[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs9[5] + (if (limbs9[5] < (limbs21[5] + i11)) then 536870912 else 0)) - (limbs21[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs9[5] + (if (limbs9[5] < (limbs21[5] + i11)) then 536870912 else 0)) - (limbs21[5] + i11)) + (i10 + 47923392)) - (if ((((limbs9[5] + (if (limbs9[5] < (limbs21[5] + i11)) then 536870912 else 0)) - (limbs21[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs9[5] + (if (limbs9[5] < (limbs21[5] + i11)) then 536870912 else 0)) - (limbs21[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs9[5] < (limbs21[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs9[6] + (if (limbs9[6] < (limbs21[6] + i13)) then 536870912 else 0)) - (limbs21[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs9[6] + (if (limbs9[6] < (limbs21[6] + i13)) then 536870912 else 0)) - (limbs21[6] + i13)) + (i12 + 10936641)) - (if ((((limbs9[6] + (if (limbs9[6] < (limbs21[6] + i13)) then 536870912 else 0)) - (limbs21[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs9[6] + (if (limbs9[6] < (limbs21[6] + i13)) then 536870912 else 0)) - (limbs21[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs9[6] < (limbs21[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs9[7] + (if (limbs9[7] < (limbs21[7] + i15)) then 536870912 else 0)) - (limbs21[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs9[7] + (if (limbs9[7] < (limbs21[7] + i15)) then 536870912 else 0)) - (limbs21[7] + i15)) + (i14 + 240920116)) - (if ((((limbs9[7] + (if (limbs9[7] < (limbs21[7] + i15)) then 536870912 else 0)) - (limbs21[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs9[7] + (if (limbs9[7] < (limbs21[7] + i15)) then 536870912 else 0)) - (limbs21[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs9[7] < (limbs21[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs9[8] + (if (limbs9[8] < (limbs21[8] + i17)) then 536870912 else 0)) - (limbs21[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs9[8] + (if (limbs9[8] < (limbs21[8] + i17)) then 536870912 else 0)) - (limbs21[8] + i17)) + (i16 + 3171406)) - (if ((((limbs9[8] + (if (limbs9[8] < (limbs21[8] + i17)) then 536870912 else 0)) - (limbs21[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_1 7d OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs22[0]) }
ASSERT_1 { (stack[2] == limbs10[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs10[0] + (if (limbs10[0] < limbs22[0]) then 536870912 else 0)) - limbs22[0])) }
ASSUME_3 { (stack[1] == (if (limbs10[0] < limbs22[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs10[0] + (if (limbs10[0] < limbs22[0]) then 536870912 else 0)) - limbs22[0]) + 410844487) >= 536870912) then ((((limbs10[0] + (if (limbs10[0] < limbs22[0]) then 536870912 else 0)) - limbs22[0]) + 410844487) - 536870912) else (((limbs10[0] + (if (limbs10[0] < limbs22[0]) then 536870912 else 0)) - limbs22[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs10[0] + (if (limbs10[0] < limbs22[0]) then 536870912 else 0)) - limbs22[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs10[0] < limbs22[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs10[1] + (if (limbs10[1] < (limbs22[1] + i3)) then 536870912 else 0)) - (limbs22[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs10[1] + (if (limbs10[1] < (limbs22[1] + i3)) then 536870912 else 0)) - (limbs22[1] + i3)) + (i2 + 17064118)) - (if ((((limbs10[1] + (if (limbs10[1] < (limbs22[1] + i3)) then 536870912 else 0)) - (limbs22[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs10[1] + (if (limbs10[1] < (limbs22[1] + i3)) then 536870912 else 0)) - (limbs22[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs10[1] < (limbs22[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs10[2] + (if (limbs10[2] < (limbs22[2] + i5)) then 536870912 else 0)) - (limbs22[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs10[2] + (if (limbs10[2] < (limbs22[2] + i5)) then 536870912 else 0)) - (limbs22[2] + i5)) + (i4 + 477274959)) - (if ((((limbs10[2] + (if (limbs10[2] < (limbs22[2] + i5)) then 536870912 else 0)) - (limbs22[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs10[2] + (if (limbs10[2] < (limbs22[2] + i5)) then 536870912 else 0)) - (limbs22[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs10[2] < (limbs22[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs10[3] + (if (limbs10[3] < (limbs22[3] + i7)) then 536870912 else 0)) - (limbs22[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs10[3] + (if (limbs10[3] < (limbs22[3] + i7)) then 536870912 else 0)) - (limbs22[3] + i7)) + (i6 + 47522512)) - (if ((((limbs10[3] + (if (limbs10[3] < (limbs22[3] + i7)) then 536870912 else 0)) - (limbs22[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs10[3] + (if (limbs10[3] < (limbs22[3] + i7)) then 536870912 else 0)) - (limbs22[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs10[3] < (limbs22[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs10[4] + (if (limbs10[4] < (limbs22[4] + i9)) then 536870912 else 0)) - (limbs22[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs10[4] + (if (limbs10[4] < (limbs22[4] + i9)) then 536870912 else 0)) - (limbs22[4] + i9)) + (i8 + 361093496)) - (if ((((limbs10[4] + (if (limbs10[4] < (limbs22[4] + i9)) then 536870912 else 0)) - (limbs22[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs10[4] + (if (limbs10[4] < (limbs22[4] + i9)) then 536870912 else 0)) - (limbs22[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs10[4] < (limbs22[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs10[5] + (if (limbs10[5] < (limbs22[5] + i11)) then 536870912 else 0)) - (limbs22[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs10[5] + (if (limbs10[5] < (limbs22[5] + i11)) then 536870912 else 0)) - (limbs22[5] + i11)) + (i10 + 47923392)) - (if ((((limbs10[5] + (if (limbs10[5] < (limbs22[5] + i11)) then 536870912 else 0)) - (limbs22[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs10[5] + (if (limbs10[5] < (limbs22[5] + i11)) then 536870912 else 0)) - (limbs22[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs10[5] < (limbs22[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs10[6] + (if (limbs10[6] < (limbs22[6] + i13)) then 536870912 else 0)) - (limbs22[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs10[6] + (if (limbs10[6] < (limbs22[6] + i13)) then 536870912 else 0)) - (limbs22[6] + i13)) + (i12 + 10936641)) - (if ((((limbs10[6] + (if (limbs10[6] < (limbs22[6] + i13)) then 536870912 else 0)) - (limbs22[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs10[6] + (if (limbs10[6] < (limbs22[6] + i13)) then 536870912 else 0)) - (limbs22[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs10[6] < (limbs22[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs10[7] + (if (limbs10[7] < (limbs22[7] + i15)) then 536870912 else 0)) - (limbs22[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs10[7] + (if (limbs10[7] < (limbs22[7] + i15)) then 536870912 else 0)) - (limbs22[7] + i15)) + (i14 + 240920116)) - (if ((((limbs10[7] + (if (limbs10[7] < (limbs22[7] + i15)) then 536870912 else 0)) - (limbs22[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs10[7] + (if (limbs10[7] < (limbs22[7] + i15)) then 536870912 else 0)) - (limbs22[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs10[7] < (limbs22[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs10[8] + (if (limbs10[8] < (limbs22[8] + i17)) then 536870912 else 0)) - (limbs22[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs10[8] + (if (limbs10[8] < (limbs22[8] + i17)) then 536870912 else 0)) - (limbs22[8] + i17)) + (i16 + 3171406)) - (if ((((limbs10[8] + (if (limbs10[8] < (limbs22[8] + i17)) then 536870912 else 0)) - (limbs22[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 6c OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 6d OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 6e OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 6f OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 70 OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 71 OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 72 OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 73 OP_ROLL
OP_PUSHBYTES_1 74 OP_ROLL OP_PUSHBYTES_1 74 OP_ROLL
OP_PUSHBYTES_4 00000020
ASSERT_0 { (stack[1] == limbs23[0]) }
ASSERT_1 { (stack[2] == limbs11[0]) }
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
ASSUME_2 { (stack[0] == ((limbs11[0] + (if (limbs11[0] < limbs23[0]) then 536870912 else 0)) - limbs23[0])) }
ASSUME_3 { (stack[1] == (if (limbs11[0] < limbs23[0]) then 1 else 0)) }
OP_DUP OP_TOALTSTACK OP_ROT OP_PUSHBYTES_4 47fd7c18 OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSERT_4 { (altstack[0] == (if ((((limbs11[0] + (if (limbs11[0] < limbs23[0]) then 536870912 else 0)) - limbs23[0]) + 410844487) >= 536870912) then ((((limbs11[0] + (if (limbs11[0] < limbs23[0]) then 536870912 else 0)) - limbs23[0]) + 410844487) - 536870912) else (((limbs11[0] + (if (limbs11[0] < limbs23[0]) then 536870912 else 0)) - limbs23[0]) + 410844487))) }
ASSERT_5 { (stack[0] == (if ((((limbs11[0] + (if (limbs11[0] < limbs23[0]) then 536870912 else 0)) - limbs23[0]) + 410844487) >= 536870912) then 1 else 0)) }
ASSERT_6 { (stack[2] == (if (limbs11[0] < limbs23[0]) then 1 else 0)) }
DEFINE_2 { stack[0] }
DEFINE_3 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_7 { (altstack[0] == ((limbs11[1] + (if (limbs11[1] < (limbs23[1] + i3)) then 536870912 else 0)) - (limbs23[1] + i3))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 b6600401 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_8 { (altstack[0] == ((((limbs11[1] + (if (limbs11[1] < (limbs23[1] + i3)) then 536870912 else 0)) - (limbs23[1] + i3)) + (i2 + 17064118)) - (if ((((limbs11[1] + (if (limbs11[1] < (limbs23[1] + i3)) then 536870912 else 0)) - (limbs23[1] + i3)) + (i2 + 17064118)) >= 536870912) then 536870912 else 0))) }
ASSUME_9 { (stack[0] == (if ((((limbs11[1] + (if (limbs11[1] < (limbs23[1] + i3)) then 536870912 else 0)) - (limbs23[1] + i3)) + (i2 + 17064118)) >= 536870912) then 1 else 0)) }
ASSUME_10 { (stack[2] == (if (limbs11[1] < (limbs23[1] + i3)) then 1 else 0)) }
DEFINE_4 { stack[0] }
DEFINE_5 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_11 { (altstack[0] == ((limbs11[2] + (if (limbs11[2] < (limbs23[2] + i5)) then 536870912 else 0)) - (limbs23[2] + i5))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 4fa3721c OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_12 { (altstack[0] == ((((limbs11[2] + (if (limbs11[2] < (limbs23[2] + i5)) then 536870912 else 0)) - (limbs23[2] + i5)) + (i4 + 477274959)) - (if ((((limbs11[2] + (if (limbs11[2] < (limbs23[2] + i5)) then 536870912 else 0)) - (limbs23[2] + i5)) + (i4 + 477274959)) >= 536870912) then 536870912 else 0))) }
ASSUME_13 { (stack[0] == (if ((((limbs11[2] + (if (limbs11[2] < (limbs23[2] + i5)) then 536870912 else 0)) - (limbs23[2] + i5)) + (i4 + 477274959)) >= 536870912) then 1 else 0)) }
ASSUME_14 { (stack[2] == (if (limbs11[2] < (limbs23[2] + i5)) then 1 else 0)) }
DEFINE_6 { stack[0] }
DEFINE_7 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_15 { (altstack[0] == ((limbs11[3] + (if (limbs11[3] < (limbs23[3] + i7)) then 536870912 else 0)) - (limbs23[3] + i7))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 d022d502 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_16 { (altstack[0] == ((((limbs11[3] + (if (limbs11[3] < (limbs23[3] + i7)) then 536870912 else 0)) - (limbs23[3] + i7)) + (i6 + 47522512)) - (if ((((limbs11[3] + (if (limbs11[3] < (limbs23[3] + i7)) then 536870912 else 0)) - (limbs23[3] + i7)) + (i6 + 47522512)) >= 536870912) then 536870912 else 0))) }
ASSUME_17 { (stack[0] == (if ((((limbs11[3] + (if (limbs11[3] < (limbs23[3] + i7)) then 536870912 else 0)) - (limbs23[3] + i7)) + (i6 + 47522512)) >= 536870912) then 1 else 0)) }
ASSUME_18 { (stack[2] == (if (limbs11[3] < (limbs23[3] + i7)) then 1 else 0)) }
DEFINE_8 { stack[0] }
DEFINE_9 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_19 { (altstack[0] == ((limbs11[4] + (if (limbs11[4] < (limbs23[4] + i9)) then 536870912 else 0)) - (limbs23[4] + i9))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 78d98515 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_20 { (altstack[0] == ((((limbs11[4] + (if (limbs11[4] < (limbs23[4] + i9)) then 536870912 else 0)) - (limbs23[4] + i9)) + (i8 + 361093496)) - (if ((((limbs11[4] + (if (limbs11[4] < (limbs23[4] + i9)) then 536870912 else 0)) - (limbs23[4] + i9)) + (i8 + 361093496)) >= 536870912) then 536870912 else 0))) }
ASSUME_21 { (stack[0] == (if ((((limbs11[4] + (if (limbs11[4] < (limbs23[4] + i9)) then 536870912 else 0)) - (limbs23[4] + i9)) + (i8 + 361093496)) >= 536870912) then 1 else 0)) }
ASSUME_22 { (stack[2] == (if (limbs11[4] < (limbs23[4] + i9)) then 1 else 0)) }
DEFINE_10 { stack[0] }
DEFINE_11 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_23 { (altstack[0] == ((limbs11[5] + (if (limbs11[5] < (limbs23[5] + i11)) then 536870912 else 0)) - (limbs23[5] + i11))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 c040db02 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_24 { (altstack[0] == ((((limbs11[5] + (if (limbs11[5] < (limbs23[5] + i11)) then 536870912 else 0)) - (limbs23[5] + i11)) + (i10 + 47923392)) - (if ((((limbs11[5] + (if (limbs11[5] < (limbs23[5] + i11)) then 536870912 else 0)) - (limbs23[5] + i11)) + (i10 + 47923392)) >= 536870912) then 536870912 else 0))) }
ASSUME_25 { (stack[0] == (if ((((limbs11[5] + (if (limbs11[5] < (limbs23[5] + i11)) then 536870912 else 0)) - (limbs23[5] + i11)) + (i10 + 47923392)) >= 536870912) then 1 else 0)) }
ASSUME_26 { (stack[2] == (if (limbs11[5] < (limbs23[5] + i11)) then 1 else 0)) }
DEFINE_12 { stack[0] }
DEFINE_13 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_27 { (altstack[0] == ((limbs11[6] + (if (limbs11[6] < (limbs23[6] + i13)) then 536870912 else 0)) - (limbs23[6] + i13))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 41e1a600 OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_28 { (altstack[0] == ((((limbs11[6] + (if (limbs11[6] < (limbs23[6] + i13)) then 536870912 else 0)) - (limbs23[6] + i13)) + (i12 + 10936641)) - (if ((((limbs11[6] + (if (limbs11[6] < (limbs23[6] + i13)) then 536870912 else 0)) - (limbs23[6] + i13)) + (i12 + 10936641)) >= 536870912) then 536870912 else 0))) }
ASSUME_29 { (stack[0] == (if ((((limbs11[6] + (if (limbs11[6] < (limbs23[6] + i13)) then 536870912 else 0)) - (limbs23[6] + i13)) + (i12 + 10936641)) >= 536870912) then 1 else 0)) }
ASSUME_30 { (stack[2] == (if (limbs11[6] < (limbs23[6] + i13)) then 1 else 0)) }
DEFINE_14 { stack[0] }
DEFINE_15 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_31 { (altstack[0] == ((limbs11[7] + (if (limbs11[7] < (limbs23[7] + i15)) then 536870912 else 0)) - (limbs23[7] + i15))) }
OP_2SWAP OP_SWAP OP_PUSHBYTES_4 34265c0e OP_ADD OP_SWAP
OP_ROT OP_ROT OP_ADD OP_2DUP OP_LESSTHANOREQUAL OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_SUB OP_ENDIF
OP_TOALTSTACK
ASSUME_32 { (altstack[0] == ((((limbs11[7] + (if (limbs11[7] < (limbs23[7] + i15)) then 536870912 else 0)) - (limbs23[7] + i15)) + (i14 + 240920116)) - (if ((((limbs11[7] + (if (limbs11[7] < (limbs23[7] + i15)) then 536870912 else 0)) - (limbs23[7] + i15)) + (i14 + 240920116)) >= 536870912) then 536870912 else 0))) }
ASSUME_33 { (stack[0] == (if ((((limbs11[7] + (if (limbs11[7] < (limbs23[7] + i15)) then 536870912 else 0)) - (limbs23[7] + i15)) + (i14 + 240920116)) >= 536870912) then 1 else 0)) }
ASSUME_34 { (stack[2] == (if (limbs11[7] < (limbs23[7] + i15)) then 1 else 0)) }
DEFINE_16 { stack[0] }
DEFINE_17 { stack[2] }
OP_2SWAP OP_ADD OP_2SWAP OP_TOALTSTACK OP_SWAP OP_FROMALTSTACK
OP_ROT OP_ROT OP_SUB OP_DUP OP_0 OP_LESSTHAN OP_TUCK OP_IF OP_PUSHNUM_2 OP_PICK OP_ADD OP_ENDIF
OP_DUP OP_TOALTSTACK
ASSUME_35 { (altstack[0] == ((limbs11[8] + (if (limbs11[8] < (limbs23[8] + i17)) then 536870912 else 0)) - (limbs23[8] + i17))) }
OP_ROT OP_TOALTSTACK OP_ROT OP_PUSHBYTES_3 4e6430 OP_ADD OP_ADD OP_FROMALTSTACK OP_2DUP OP_GREATERTHANOREQUAL OP_IF OP_SUB OP_ELSE OP_DROP OP_ENDIF OP_TOALTSTACK
ASSUME_36 { (altstack[0] == ((((limbs11[8] + (if (limbs11[8] < (limbs23[8] + i17)) then 536870912 else 0)) - (limbs23[8] + i17)) + (i16 + 3171406)) - (if ((((limbs11[8] + (if (limbs11[8] < (limbs23[8] + i17)) then 536870912 else 0)) - (limbs23[8] + i17)) + (i16 + 3171406)) >= 536870912) then 536870912 else 0))) }
OP_DUP
OP_NOTIF OP_FROMALTSTACK OP_DROP OP_ENDIF OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_FROMALTSTACK OP_DROP OP_FROMALTSTACK
OP_PUSHNUM_9 OP_ROLL OP_IF OP_FROMALTSTACK OP_DROP OP_ENDIF
ASSERT_0 { (((v0 + (if (v0 < v12) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v12) == ((((((((stack[99] + (stack[100] * 536870912)) + (stack[101] * 288230376151711744)) + (stack[102] * 154742504910672534362390528)) + (stack[103] * 83076749736557242056487941267521536)) + (stack[104] * 44601490397061246283071436545296723011960832)) + (stack[105] * 23945242826029513411849172299223580994042798784118784)) + (stack[106] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[107] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_1 { (((v1 + (if (v1 < v13) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v13) == ((((((((stack[90] + (stack[91] * 536870912)) + (stack[92] * 288230376151711744)) + (stack[93] * 154742504910672534362390528)) + (stack[94] * 83076749736557242056487941267521536)) + (stack[95] * 44601490397061246283071436545296723011960832)) + (stack[96] * 23945242826029513411849172299223580994042798784118784)) + (stack[97] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[98] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_2 { (((v2 + (if (v2 < v14) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v14) == ((((((((stack[81] + (stack[82] * 536870912)) + (stack[83] * 288230376151711744)) + (stack[84] * 154742504910672534362390528)) + (stack[85] * 83076749736557242056487941267521536)) + (stack[86] * 44601490397061246283071436545296723011960832)) + (stack[87] * 23945242826029513411849172299223580994042798784118784)) + (stack[88] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[89] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_3 { (((v3 + (if (v3 < v15) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v15) == ((((((((stack[72] + (stack[73] * 536870912)) + (stack[74] * 288230376151711744)) + (stack[75] * 154742504910672534362390528)) + (stack[76] * 83076749736557242056487941267521536)) + (stack[77] * 44601490397061246283071436545296723011960832)) + (stack[78] * 23945242826029513411849172299223580994042798784118784)) + (stack[79] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[80] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_4 { (((v4 + (if (v4 < v16) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v16) == ((((((((stack[63] + (stack[64] * 536870912)) + (stack[65] * 288230376151711744)) + (stack[66] * 154742504910672534362390528)) + (stack[67] * 83076749736557242056487941267521536)) + (stack[68] * 44601490397061246283071436545296723011960832)) + (stack[69] * 23945242826029513411849172299223580994042798784118784)) + (stack[70] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[71] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_5 { (((v5 + (if (v5 < v17) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v17) == ((((((((stack[54] + (stack[55] * 536870912)) + (stack[56] * 288230376151711744)) + (stack[57] * 154742504910672534362390528)) + (stack[58] * 83076749736557242056487941267521536)) + (stack[59] * 44601490397061246283071436545296723011960832)) + (stack[60] * 23945242826029513411849172299223580994042798784118784)) + (stack[61] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[62] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_6 { (((v6 + (if (v6 < v18) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v18) == ((((((((stack[45] + (stack[46] * 536870912)) + (stack[47] * 288230376151711744)) + (stack[48] * 154742504910672534362390528)) + (stack[49] * 83076749736557242056487941267521536)) + (stack[50] * 44601490397061246283071436545296723011960832)) + (stack[51] * 23945242826029513411849172299223580994042798784118784)) + (stack[52] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[53] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_7 { (((v7 + (if (v7 < v19) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v19) == ((((((((stack[36] + (stack[37] * 536870912)) + (stack[38] * 288230376151711744)) + (stack[39] * 154742504910672534362390528)) + (stack[40] * 83076749736557242056487941267521536)) + (stack[41] * 44601490397061246283071436545296723011960832)) + (stack[42] * 23945242826029513411849172299223580994042798784118784)) + (stack[43] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[44] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_8 { (((v8 + (if (v8 < v20) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v20) == ((((((((stack[27] + (stack[28] * 536870912)) + (stack[29] * 288230376151711744)) + (stack[30] * 154742504910672534362390528)) + (stack[31] * 83076749736557242056487941267521536)) + (stack[32] * 44601490397061246283071436545296723011960832)) + (stack[33] * 23945242826029513411849172299223580994042798784118784)) + (stack[34] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[35] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_9 { (((v9 + (if (v9 < v21) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v21) == ((((((((stack[18] + (stack[19] * 536870912)) + (stack[20] * 288230376151711744)) + (stack[21] * 154742504910672534362390528)) + (stack[22] * 83076749736557242056487941267521536)) + (stack[23] * 44601490397061246283071436545296723011960832)) + (stack[24] * 23945242826029513411849172299223580994042798784118784)) + (stack[25] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[26] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_10 { (((v10 + (if (v10 < v22) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v22) == ((((((((stack[9] + (stack[10] * 536870912)) + (stack[11] * 288230376151711744)) + (stack[12] * 154742504910672534362390528)) + (stack[13] * 83076749736557242056487941267521536)) + (stack[14] * 44601490397061246283071436545296723011960832)) + (stack[15] * 23945242826029513411849172299223580994042798784118784)) + (stack[16] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[17] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
ASSERT_11 { (((v11 + (if (v11 < v23) then 21888242871839275222246405745257275088696311157297823662689037894645226208583 else 0)) - v23) == ((((((((stack[0] + (stack[1] * 536870912)) + (stack[2] * 288230376151711744)) + (stack[3] * 154742504910672534362390528)) + (stack[4] * 83076749736557242056487941267521536)) + (stack[5] * 44601490397061246283071436545296723011960832)) + (stack[6] * 23945242826029513411849172299223580994042798784118784)) + (stack[7] * 12855504354071922204335696738729300820177623950262342682411008)) + (stack[8] * 6901746346790563787434755862277025452451108972170386555162524223799296))) }
